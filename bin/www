#!/usr/bin/env node

/**
 * Module dependencies.
 */

import app from '../app.js';
import debugModule from 'debug';
import http from 'http';
import { Server } from 'socket.io';
const debug = debugModule('culinary-mastery:server');

const server = http.createServer(app);
const io = new Server(server);

// Now that app is defined, attach io to app.locals so routes can access it
app.locals.io = io;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080'); // Changed fallback to 8080
app.set('port', port);

/**
 * Create HTTP server.
 */

/**
 * Add a startup delay to ensure all resources are initialized.
 */
const startupDelay = 60000; // 5000ms = 5 seconds (adjust as needed)
console.log(`Delaying server startup by ${startupDelay / 1000} seconds...`);
setTimeout(() => {
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}, startupDelay);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}